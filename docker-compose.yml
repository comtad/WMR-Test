version: '3.8'

services:
    app:
        build:
            context: .
            dockerfile: _docker/php/Dockerfile
        container_name: laravel_app
        restart: on-failure:5
        user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
        working_dir: /var/www
        volumes:
            - .:/var/www
        networks:
            - app-network
        healthcheck:  # Защита: проверка на живость PHP-FPM
            test: ["CMD", "pgrep", "php-fpm"]
            interval: 30s
            timeout: 10s
            retries: 3

    vite:
        image: node:20-alpine
        container_name: laravel_vite
        working_dir: /var/www
        volumes:
            - .:/var/www
        command: [ "npm", "run", "dev", "--", "--host=0.0.0.0", "--port=5173" ]
        ports:
            - "5173:5173"
        restart: on-failure:5
        healthcheck:  # Проверка: Vite сервер отвечает?
            test: ["CMD", "curl", "-f", "http://localhost:5173"]
            interval: 30s
            timeout: 10s
            retries: 3

    nginx:
        image: nginx:alpine
        container_name: laravel_nginx
        restart: on-failure:5
        ports:
            - "80:80"
        volumes:
            - .:/var/www
            - ./_docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
        networks:
            - app-network
        depends_on:
            app:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost"]
            interval: 30s
            timeout: 10s
            retries: 3

    pgsql:
        image: postgres:15-alpine
        container_name: laravel_pgsql
        restart: always  # Всегда рестарт для БД
        environment:
            POSTGRES_DB: ${DB_DATABASE:-laravel}
            POSTGRES_USER: ${DB_USERNAME:-laravel}
            POSTGRES_PASSWORD: ${DB_PASSWORD:-secret}
        ports:
            - "5432:5432"
        volumes:
            - db-data:/var/lib/postgresql/data
        networks:
            - app-network
        healthcheck:  # Защита: БД отвечает?
            test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-laravel}"]
            interval: 10s
            timeout: 5s
            retries: 5

    redis:
        image: redis:alpine
        container_name: laravel_redis
        restart: always  # Всегда рестарт для Redis
        ports:
            - "6379:6379"
        volumes:
            - redis-data:/data
        networks:
            - app-network
        healthcheck:  # Защита: Redis отвечает?
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 3

    reverb:
        build:
            context: .
            dockerfile: _docker/php/Dockerfile
        container_name: laravel_reverb
        restart: on-failure:5
        user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
        working_dir: /var/www
        volumes:
            - .:/var/www
        networks:
            - app-network
        command: ["php", "artisan", "reverb:start", "--host=0.0.0.0", "--port=8081"]
        depends_on:
            redis:
                condition: service_healthy  # Ждёт healthy Redis
        ports:
            - "8081:8081"
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8081"]
            interval: 30s
            timeout: 10s
            retries: 3

    queue:
        build:
            context: .
            dockerfile: _docker/php/Dockerfile
        container_name: laravel_queue
        restart: on-failure:5
        user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
        working_dir: /var/www
        volumes:
            - .:/var/www
        networks:
            - app-network
        command: ["php", "artisan", "queue:work", "--sleep=3", "--tries=3", "--max-time=3600"]
        depends_on:
            redis:
                condition: service_healthy
            pgsql:
                condition: service_healthy
        healthcheck:  # Защита: Queue worker жив?
            test: ["CMD-SHELL", "pgrep -f 'queue:work' || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3

    horizon:
        build:
            context: .
            dockerfile: _docker/php/Dockerfile
        container_name: laravel_horizon
        restart: on-failure:5
        user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
        working_dir: /var/www
        volumes:
            - .:/var/www
        networks:
            - app-network
        command: [ "php", "artisan", "horizon" ]
        depends_on:
            redis:
                condition: service_healthy
            pgsql: # Если используешь БД для metrics
                condition: service_healthy
        healthcheck:
            test: [ "CMD-SHELL", "pgrep -f 'horizon' || exit 1" ]
            interval: 30s
            timeout: 10s
            retries: 3

networks:
    app-network:
        driver: bridge

volumes:
    db-data:
    redis-data:
